1 注意4维向量与4*4矩阵乘法时，向量的齐次坐标W设为1，才能得到3维坐标系下正确的位置信息

2  I have been pulling my hair out trying to debug this fragment shader if else-if statement:

if ( stage.x == 1 ) // ********** STAGE: DRAW SOME POINTS

Comparing floating point numbers with "==" operator is generally unsafe due to floating point accuracy issues.

GLSL中这么写是编译不过的

3 IBO 只支持 GL_UNSIGNED_BYTE  GL_UNSIGNED_SHORT JAVA里没有对应的无符号数，
但最大unsigned byte -128 放进ByteBuffer再上传也是一样的

java opengl: glDrawElements() with >32767 vertices

I haven't used OpenGL from Java so I'm speculating here,
but there's a good chance that you can just use the negative numbers whose binary reprentation
is the same as the unsigned positive numbers you really want.
You're giving GL some byte pairs and telling it to interpret them as unsigned,
and as long as they have the right value when interpreted that way, it should work.
It doesn't matter if Java thought they meant something different when it stored those bits in memory.
If you're iterating, just ignore the wraparound and keep on incrementing. When you get to -1, you're done.
If you're calculating the index numbers as ints (which don't have this range problem) and then casting to short,
subtract 65536 from any number that's greater than 32767.
